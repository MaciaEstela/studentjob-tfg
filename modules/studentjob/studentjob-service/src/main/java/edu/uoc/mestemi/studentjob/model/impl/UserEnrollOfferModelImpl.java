/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.mestemi.studentjob.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import edu.uoc.mestemi.studentjob.model.UserEnrollOffer;
import edu.uoc.mestemi.studentjob.model.UserEnrollOfferModel;
import edu.uoc.mestemi.studentjob.service.persistence.UserEnrollOfferPK;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserEnrollOffer service. Represents a row in the &quot;SJob_UserEnrollOffer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserEnrollOfferModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserEnrollOfferImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserEnrollOfferImpl
 * @generated
 */
@JSON(strict = true)
public class UserEnrollOfferModelImpl
	extends BaseModelImpl<UserEnrollOffer> implements UserEnrollOfferModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user enroll offer model instance should use the <code>UserEnrollOffer</code> interface instead.
	 */
	public static final String TABLE_NAME = "SJob_UserEnrollOffer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userId", Types.BIGINT},
		{"offerId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("offerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SJob_UserEnrollOffer (uuid_ VARCHAR(75) null,userId LONG not null,offerId LONG not null,groupId LONG,createDate DATE null,primary key (userId, offerId))";

	public static final String TABLE_SQL_DROP =
		"drop table SJob_UserEnrollOffer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userEnrollOffer.id.userId ASC, userEnrollOffer.id.offerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SJob_UserEnrollOffer.userId ASC, SJob_UserEnrollOffer.offerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OFFERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UserEnrollOfferModelImpl() {
	}

	@Override
	public UserEnrollOfferPK getPrimaryKey() {
		return new UserEnrollOfferPK(_userId, _offerId);
	}

	@Override
	public void setPrimaryKey(UserEnrollOfferPK primaryKey) {
		setUserId(primaryKey.userId);
		setOfferId(primaryKey.offerId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserEnrollOfferPK(_userId, _offerId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserEnrollOfferPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserEnrollOffer.class;
	}

	@Override
	public String getModelClassName() {
		return UserEnrollOffer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserEnrollOffer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserEnrollOffer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEnrollOffer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserEnrollOffer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserEnrollOffer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserEnrollOffer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserEnrollOffer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserEnrollOffer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserEnrollOffer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<UserEnrollOffer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserEnrollOffer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserEnrollOffer, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<UserEnrollOffer, Object>>();
		Map<String, BiConsumer<UserEnrollOffer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserEnrollOffer, ?>>();

		attributeGetterFunctions.put("uuid", UserEnrollOffer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<UserEnrollOffer, String>)UserEnrollOffer::setUuid);
		attributeGetterFunctions.put("userId", UserEnrollOffer::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UserEnrollOffer, Long>)UserEnrollOffer::setUserId);
		attributeGetterFunctions.put("offerId", UserEnrollOffer::getOfferId);
		attributeSetterBiConsumers.put(
			"offerId",
			(BiConsumer<UserEnrollOffer, Long>)UserEnrollOffer::setOfferId);
		attributeGetterFunctions.put("groupId", UserEnrollOffer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<UserEnrollOffer, Long>)UserEnrollOffer::setGroupId);
		attributeGetterFunctions.put(
			"createDate", UserEnrollOffer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UserEnrollOffer, Date>)UserEnrollOffer::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public long getOfferId() {
		return _offerId;
	}

	@Override
	public void setOfferId(long offerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_offerId = offerId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOfferId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("offerId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public UserEnrollOffer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserEnrollOffer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserEnrollOfferImpl userEnrollOfferImpl = new UserEnrollOfferImpl();

		userEnrollOfferImpl.setUuid(getUuid());
		userEnrollOfferImpl.setUserId(getUserId());
		userEnrollOfferImpl.setOfferId(getOfferId());
		userEnrollOfferImpl.setGroupId(getGroupId());
		userEnrollOfferImpl.setCreateDate(getCreateDate());

		userEnrollOfferImpl.resetOriginalValues();

		return userEnrollOfferImpl;
	}

	@Override
	public UserEnrollOffer cloneWithOriginalValues() {
		UserEnrollOfferImpl userEnrollOfferImpl = new UserEnrollOfferImpl();

		userEnrollOfferImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		userEnrollOfferImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		userEnrollOfferImpl.setOfferId(
			this.<Long>getColumnOriginalValue("offerId"));
		userEnrollOfferImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		userEnrollOfferImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return userEnrollOfferImpl;
	}

	@Override
	public int compareTo(UserEnrollOffer userEnrollOffer) {
		UserEnrollOfferPK primaryKey = userEnrollOffer.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserEnrollOffer)) {
			return false;
		}

		UserEnrollOffer userEnrollOffer = (UserEnrollOffer)object;

		UserEnrollOfferPK primaryKey = userEnrollOffer.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserEnrollOffer> toCacheModel() {
		UserEnrollOfferCacheModel userEnrollOfferCacheModel =
			new UserEnrollOfferCacheModel();

		userEnrollOfferCacheModel.userEnrollOfferPK = getPrimaryKey();

		userEnrollOfferCacheModel.uuid = getUuid();

		String uuid = userEnrollOfferCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userEnrollOfferCacheModel.uuid = null;
		}

		userEnrollOfferCacheModel.userId = getUserId();

		userEnrollOfferCacheModel.offerId = getOfferId();

		userEnrollOfferCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userEnrollOfferCacheModel.createDate = createDate.getTime();
		}
		else {
			userEnrollOfferCacheModel.createDate = Long.MIN_VALUE;
		}

		return userEnrollOfferCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserEnrollOffer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserEnrollOffer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEnrollOffer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((UserEnrollOffer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserEnrollOffer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserEnrollOffer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserEnrollOffer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserEnrollOffer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserEnrollOffer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserEnrollOffer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _userId;
	private long _offerId;
	private long _groupId;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<UserEnrollOffer, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserEnrollOffer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("offerId", _offerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("userId", 2L);

		columnBitmasks.put("offerId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("createDate", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserEnrollOffer _escapedModel;

}