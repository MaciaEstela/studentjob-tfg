/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.mestemi.studentjob.service.base;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import edu.uoc.mestemi.studentjob.model.StudentProfile;
import edu.uoc.mestemi.studentjob.service.StudentProfileLocalService;
import edu.uoc.mestemi.studentjob.service.StudentProfileLocalServiceUtil;
import edu.uoc.mestemi.studentjob.service.persistence.CompanyProfilePersistence;
import edu.uoc.mestemi.studentjob.service.persistence.DegreeAreaPersistence;
import edu.uoc.mestemi.studentjob.service.persistence.DegreePersistence;
import edu.uoc.mestemi.studentjob.service.persistence.OfferPersistence;
import edu.uoc.mestemi.studentjob.service.persistence.SocialMediaNetworkPersistence;
import edu.uoc.mestemi.studentjob.service.persistence.SocialMediaPersistence;
import edu.uoc.mestemi.studentjob.service.persistence.StudentProfilePersistence;
import edu.uoc.mestemi.studentjob.service.persistence.UserEnrollOfferPersistence;

import java.io.Serializable;

import java.lang.reflect.Field;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the student profile local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link edu.uoc.mestemi.studentjob.service.impl.StudentProfileLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see edu.uoc.mestemi.studentjob.service.impl.StudentProfileLocalServiceImpl
 * @generated
 */
public abstract class StudentProfileLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AopService, IdentifiableOSGiService, StudentProfileLocalService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>StudentProfileLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>StudentProfileLocalServiceUtil</code>.
	 */

	/**
	 * Adds the student profile to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect StudentProfileLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param studentProfile the student profile
	 * @return the student profile that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StudentProfile addStudentProfile(StudentProfile studentProfile) {
		studentProfile.setNew(true);

		return studentProfilePersistence.update(studentProfile);
	}

	/**
	 * Creates a new student profile with the primary key. Does not add the student profile to the database.
	 *
	 * @param studentProfileId the primary key for the new student profile
	 * @return the new student profile
	 */
	@Override
	@Transactional(enabled = false)
	public StudentProfile createStudentProfile(long studentProfileId) {
		return studentProfilePersistence.create(studentProfileId);
	}

	/**
	 * Deletes the student profile with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect StudentProfileLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param studentProfileId the primary key of the student profile
	 * @return the student profile that was removed
	 * @throws PortalException if a student profile with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StudentProfile deleteStudentProfile(long studentProfileId)
		throws PortalException {

		return studentProfilePersistence.remove(studentProfileId);
	}

	/**
	 * Deletes the student profile from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect StudentProfileLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param studentProfile the student profile
	 * @return the student profile that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StudentProfile deleteStudentProfile(StudentProfile studentProfile) {
		return studentProfilePersistence.remove(studentProfile);
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return studentProfilePersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			StudentProfile.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return studentProfilePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>edu.uoc.mestemi.studentjob.model.impl.StudentProfileModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return studentProfilePersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>edu.uoc.mestemi.studentjob.model.impl.StudentProfileModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return studentProfilePersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return studentProfilePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return studentProfilePersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public StudentProfile fetchStudentProfile(long studentProfileId) {
		return studentProfilePersistence.fetchByPrimaryKey(studentProfileId);
	}

	/**
	 * Returns the student profile matching the UUID and group.
	 *
	 * @param uuid the student profile's UUID
	 * @param groupId the primary key of the group
	 * @return the matching student profile, or <code>null</code> if a matching student profile could not be found
	 */
	@Override
	public StudentProfile fetchStudentProfileByUuidAndGroupId(
		String uuid, long groupId) {

		return studentProfilePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the student profile with the primary key.
	 *
	 * @param studentProfileId the primary key of the student profile
	 * @return the student profile
	 * @throws PortalException if a student profile with the primary key could not be found
	 */
	@Override
	public StudentProfile getStudentProfile(long studentProfileId)
		throws PortalException {

		return studentProfilePersistence.findByPrimaryKey(studentProfileId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(studentProfileLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StudentProfile.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("studentProfileId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			studentProfileLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(StudentProfile.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"studentProfileId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(studentProfileLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StudentProfile.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("studentProfileId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<StudentProfile>() {

				@Override
				public void performAction(StudentProfile studentProfile)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, studentProfile);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(StudentProfile.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return studentProfilePersistence.create(
			((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return studentProfileLocalService.deleteStudentProfile(
			(StudentProfile)persistedModel);
	}

	@Override
	public BasePersistence<StudentProfile> getBasePersistence() {
		return studentProfilePersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return studentProfilePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the student profiles matching the UUID and company.
	 *
	 * @param uuid the UUID of the student profiles
	 * @param companyId the primary key of the company
	 * @return the matching student profiles, or an empty list if no matches were found
	 */
	@Override
	public List<StudentProfile> getStudentProfilesByUuidAndCompanyId(
		String uuid, long companyId) {

		return studentProfilePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of student profiles matching the UUID and company.
	 *
	 * @param uuid the UUID of the student profiles
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of student profiles
	 * @param end the upper bound of the range of student profiles (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching student profiles, or an empty list if no matches were found
	 */
	@Override
	public List<StudentProfile> getStudentProfilesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<StudentProfile> orderByComparator) {

		return studentProfilePersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the student profile matching the UUID and group.
	 *
	 * @param uuid the student profile's UUID
	 * @param groupId the primary key of the group
	 * @return the matching student profile
	 * @throws PortalException if a matching student profile could not be found
	 */
	@Override
	public StudentProfile getStudentProfileByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return studentProfilePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the student profiles.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>edu.uoc.mestemi.studentjob.model.impl.StudentProfileModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of student profiles
	 * @param end the upper bound of the range of student profiles (not inclusive)
	 * @return the range of student profiles
	 */
	@Override
	public List<StudentProfile> getStudentProfiles(int start, int end) {
		return studentProfilePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of student profiles.
	 *
	 * @return the number of student profiles
	 */
	@Override
	public int getStudentProfilesCount() {
		return studentProfilePersistence.countAll();
	}

	/**
	 * Updates the student profile in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect StudentProfileLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param studentProfile the student profile
	 * @return the student profile that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StudentProfile updateStudentProfile(StudentProfile studentProfile) {
		return studentProfilePersistence.update(studentProfile);
	}

	/**
	 */
	@Override
	public void addDegreeStudentProfile(long degreeId, long studentProfileId) {
		degreePersistence.addStudentProfile(degreeId, studentProfileId);
	}

	/**
	 */
	@Override
	public void addDegreeStudentProfile(
		long degreeId, StudentProfile studentProfile) {

		degreePersistence.addStudentProfile(degreeId, studentProfile);
	}

	/**
	 */
	@Override
	public void addDegreeStudentProfiles(
		long degreeId, long[] studentProfileIds) {

		degreePersistence.addStudentProfiles(degreeId, studentProfileIds);
	}

	/**
	 */
	@Override
	public void addDegreeStudentProfiles(
		long degreeId, List<StudentProfile> studentProfiles) {

		degreePersistence.addStudentProfiles(degreeId, studentProfiles);
	}

	/**
	 */
	@Override
	public void clearDegreeStudentProfiles(long degreeId) {
		degreePersistence.clearStudentProfiles(degreeId);
	}

	/**
	 */
	@Override
	public void deleteDegreeStudentProfile(
		long degreeId, long studentProfileId) {

		degreePersistence.removeStudentProfile(degreeId, studentProfileId);
	}

	/**
	 */
	@Override
	public void deleteDegreeStudentProfile(
		long degreeId, StudentProfile studentProfile) {

		degreePersistence.removeStudentProfile(degreeId, studentProfile);
	}

	/**
	 */
	@Override
	public void deleteDegreeStudentProfiles(
		long degreeId, long[] studentProfileIds) {

		degreePersistence.removeStudentProfiles(degreeId, studentProfileIds);
	}

	/**
	 */
	@Override
	public void deleteDegreeStudentProfiles(
		long degreeId, List<StudentProfile> studentProfiles) {

		degreePersistence.removeStudentProfiles(degreeId, studentProfiles);
	}

	/**
	 * Returns the degreeIds of the degrees associated with the student profile.
	 *
	 * @param studentProfileId the studentProfileId of the student profile
	 * @return long[] the degreeIds of degrees associated with the student profile
	 */
	@Override
	public long[] getDegreePrimaryKeys(long studentProfileId) {
		return studentProfilePersistence.getDegreePrimaryKeys(studentProfileId);
	}

	/**
	 */
	@Override
	public List<StudentProfile> getDegreeStudentProfiles(long degreeId) {
		return studentProfilePersistence.getDegreeStudentProfiles(degreeId);
	}

	/**
	 */
	@Override
	public List<StudentProfile> getDegreeStudentProfiles(
		long degreeId, int start, int end) {

		return studentProfilePersistence.getDegreeStudentProfiles(
			degreeId, start, end);
	}

	/**
	 */
	@Override
	public List<StudentProfile> getDegreeStudentProfiles(
		long degreeId, int start, int end,
		OrderByComparator<StudentProfile> orderByComparator) {

		return studentProfilePersistence.getDegreeStudentProfiles(
			degreeId, start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getDegreeStudentProfilesCount(long degreeId) {
		return degreePersistence.getStudentProfilesSize(degreeId);
	}

	/**
	 */
	@Override
	public boolean hasDegreeStudentProfile(
		long degreeId, long studentProfileId) {

		return degreePersistence.containsStudentProfile(
			degreeId, studentProfileId);
	}

	/**
	 */
	@Override
	public boolean hasDegreeStudentProfiles(long degreeId) {
		return degreePersistence.containsStudentProfiles(degreeId);
	}

	/**
	 */
	@Override
	public void setDegreeStudentProfiles(
		long degreeId, long[] studentProfileIds) {

		degreePersistence.setStudentProfiles(degreeId, studentProfileIds);
	}

	@Deactivate
	protected void deactivate() {
		_setLocalServiceUtilService(null);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			StudentProfileLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		studentProfileLocalService = (StudentProfileLocalService)aopProxy;

		_setLocalServiceUtilService(studentProfileLocalService);
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return StudentProfileLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return StudentProfile.class;
	}

	protected String getModelClassName() {
		return StudentProfile.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = studentProfilePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	private void _setLocalServiceUtilService(
		StudentProfileLocalService studentProfileLocalService) {

		try {
			Field field = StudentProfileLocalServiceUtil.class.getDeclaredField(
				"_service");

			field.setAccessible(true);

			field.set(null, studentProfileLocalService);
		}
		catch (ReflectiveOperationException reflectiveOperationException) {
			throw new RuntimeException(reflectiveOperationException);
		}
	}

	@Reference
	protected CompanyProfilePersistence companyProfilePersistence;

	@Reference
	protected DegreePersistence degreePersistence;

	@Reference
	protected DegreeAreaPersistence degreeAreaPersistence;

	@Reference
	protected OfferPersistence offerPersistence;

	@Reference
	protected SocialMediaPersistence socialMediaPersistence;

	@Reference
	protected SocialMediaNetworkPersistence socialMediaNetworkPersistence;

	protected StudentProfileLocalService studentProfileLocalService;

	@Reference
	protected StudentProfilePersistence studentProfilePersistence;

	@Reference
	protected UserEnrollOfferPersistence userEnrollOfferPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetCategoryLocalService
		assetCategoryLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetEntryLocalService
		assetEntryLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetLinkLocalService
		assetLinkLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetTagLocalService
		assetTagLocalService;

}