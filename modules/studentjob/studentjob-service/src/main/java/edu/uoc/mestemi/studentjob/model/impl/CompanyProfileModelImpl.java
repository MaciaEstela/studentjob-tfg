/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.uoc.mestemi.studentjob.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import edu.uoc.mestemi.studentjob.model.CompanyProfile;
import edu.uoc.mestemi.studentjob.model.CompanyProfileModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CompanyProfile service. Represents a row in the &quot;SJob_CompanyProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CompanyProfileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompanyProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CompanyProfileImpl
 * @generated
 */
@JSON(strict = true)
public class CompanyProfileModelImpl
	extends BaseModelImpl<CompanyProfile> implements CompanyProfileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a company profile model instance should use the <code>CompanyProfile</code> interface instead.
	 */
	public static final String TABLE_NAME = "SJob_CompanyProfile";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"companyProfileId", Types.BIGINT},
		{"regionId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"title", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"sector", Types.VARCHAR},
		{"website", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("regionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("website", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SJob_CompanyProfile (uuid_ VARCHAR(75) null,companyProfileId LONG not null primary key,regionId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,title STRING null,description STRING null,email VARCHAR(75) null,sector STRING null,website VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SJob_CompanyProfile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY companyProfile.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SJob_CompanyProfile.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CompanyProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companyProfileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanyProfileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companyProfileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompanyProfile.class;
	}

	@Override
	public String getModelClassName() {
		return CompanyProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CompanyProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CompanyProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanyProfile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CompanyProfile)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CompanyProfile, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CompanyProfile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CompanyProfile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CompanyProfile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CompanyProfile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CompanyProfile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CompanyProfile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CompanyProfile, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CompanyProfile, Object>>();
		Map<String, BiConsumer<CompanyProfile, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CompanyProfile, ?>>();

		attributeGetterFunctions.put("uuid", CompanyProfile::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setUuid);
		attributeGetterFunctions.put(
			"companyProfileId", CompanyProfile::getCompanyProfileId);
		attributeSetterBiConsumers.put(
			"companyProfileId",
			(BiConsumer<CompanyProfile, Long>)
				CompanyProfile::setCompanyProfileId);
		attributeGetterFunctions.put("regionId", CompanyProfile::getRegionId);
		attributeSetterBiConsumers.put(
			"regionId",
			(BiConsumer<CompanyProfile, Long>)CompanyProfile::setRegionId);
		attributeGetterFunctions.put("groupId", CompanyProfile::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CompanyProfile, Long>)CompanyProfile::setGroupId);
		attributeGetterFunctions.put("companyId", CompanyProfile::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CompanyProfile, Long>)CompanyProfile::setCompanyId);
		attributeGetterFunctions.put("userId", CompanyProfile::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CompanyProfile, Long>)CompanyProfile::setUserId);
		attributeGetterFunctions.put("userName", CompanyProfile::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setUserName);
		attributeGetterFunctions.put(
			"createDate", CompanyProfile::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CompanyProfile, Date>)CompanyProfile::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CompanyProfile::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CompanyProfile, Date>)CompanyProfile::setModifiedDate);
		attributeGetterFunctions.put("active", CompanyProfile::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<CompanyProfile, Boolean>)CompanyProfile::setActive);
		attributeGetterFunctions.put("title", CompanyProfile::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setTitle);
		attributeGetterFunctions.put(
			"description", CompanyProfile::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setDescription);
		attributeGetterFunctions.put("email", CompanyProfile::getEmail);
		attributeSetterBiConsumers.put(
			"email",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setEmail);
		attributeGetterFunctions.put("sector", CompanyProfile::getSector);
		attributeSetterBiConsumers.put(
			"sector",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setSector);
		attributeGetterFunctions.put("website", CompanyProfile::getWebsite);
		attributeSetterBiConsumers.put(
			"website",
			(BiConsumer<CompanyProfile, String>)CompanyProfile::setWebsite);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCompanyProfileId() {
		return _companyProfileId;
	}

	@Override
	public void setCompanyProfileId(long companyProfileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyProfileId = companyProfileId;
	}

	@JSON
	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_regionId = regionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getSector() {
		if (_sector == null) {
			return "";
		}
		else {
			return _sector;
		}
	}

	@Override
	public String getSector(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSector(languageId);
	}

	@Override
	public String getSector(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSector(languageId, useDefault);
	}

	@Override
	public String getSector(String languageId) {
		return LocalizationUtil.getLocalization(getSector(), languageId);
	}

	@Override
	public String getSector(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSector(), languageId, useDefault);
	}

	@Override
	public String getSectorCurrentLanguageId() {
		return _sectorCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSectorCurrentValue() {
		Locale locale = getLocale(_sectorCurrentLanguageId);

		return getSector(locale);
	}

	@Override
	public Map<Locale, String> getSectorMap() {
		return LocalizationUtil.getLocalizationMap(getSector());
	}

	@Override
	public void setSector(String sector) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sector = sector;
	}

	@Override
	public void setSector(String sector, Locale locale) {
		setSector(sector, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSector(String sector, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(sector)) {
			setSector(
				LocalizationUtil.updateLocalization(
					getSector(), "Sector", sector, languageId,
					defaultLanguageId));
		}
		else {
			setSector(
				LocalizationUtil.removeLocalization(
					getSector(), "Sector", languageId));
		}
	}

	@Override
	public void setSectorCurrentLanguageId(String languageId) {
		_sectorCurrentLanguageId = languageId;
	}

	@Override
	public void setSectorMap(Map<Locale, String> sectorMap) {
		setSectorMap(sectorMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSectorMap(
		Map<Locale, String> sectorMap, Locale defaultLocale) {

		if (sectorMap == null) {
			return;
		}

		setSector(
			LocalizationUtil.updateLocalization(
				sectorMap, getSector(), "Sector",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getWebsite() {
		if (_website == null) {
			return "";
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_website = website;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CompanyProfile.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CompanyProfile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> sectorMap = getSectorMap();

		for (Map.Entry<Locale, String> entry : sectorMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CompanyProfile.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}

		String sector = getSector(defaultLocale);

		if (Validator.isNull(sector)) {
			setSector(getSector(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSector(getSector(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CompanyProfile toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CompanyProfile>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompanyProfileImpl companyProfileImpl = new CompanyProfileImpl();

		companyProfileImpl.setUuid(getUuid());
		companyProfileImpl.setCompanyProfileId(getCompanyProfileId());
		companyProfileImpl.setRegionId(getRegionId());
		companyProfileImpl.setGroupId(getGroupId());
		companyProfileImpl.setCompanyId(getCompanyId());
		companyProfileImpl.setUserId(getUserId());
		companyProfileImpl.setUserName(getUserName());
		companyProfileImpl.setCreateDate(getCreateDate());
		companyProfileImpl.setModifiedDate(getModifiedDate());
		companyProfileImpl.setActive(isActive());
		companyProfileImpl.setTitle(getTitle());
		companyProfileImpl.setDescription(getDescription());
		companyProfileImpl.setEmail(getEmail());
		companyProfileImpl.setSector(getSector());
		companyProfileImpl.setWebsite(getWebsite());

		companyProfileImpl.resetOriginalValues();

		return companyProfileImpl;
	}

	@Override
	public CompanyProfile cloneWithOriginalValues() {
		CompanyProfileImpl companyProfileImpl = new CompanyProfileImpl();

		companyProfileImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		companyProfileImpl.setCompanyProfileId(
			this.<Long>getColumnOriginalValue("companyProfileId"));
		companyProfileImpl.setRegionId(
			this.<Long>getColumnOriginalValue("regionId"));
		companyProfileImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		companyProfileImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		companyProfileImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		companyProfileImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		companyProfileImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		companyProfileImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		companyProfileImpl.setActive(
			this.<Boolean>getColumnOriginalValue("active_"));
		companyProfileImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		companyProfileImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		companyProfileImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		companyProfileImpl.setSector(
			this.<String>getColumnOriginalValue("sector"));
		companyProfileImpl.setWebsite(
			this.<String>getColumnOriginalValue("website"));

		return companyProfileImpl;
	}

	@Override
	public int compareTo(CompanyProfile companyProfile) {
		int value = 0;

		value = getTitle().compareTo(companyProfile.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CompanyProfile)) {
			return false;
		}

		CompanyProfile companyProfile = (CompanyProfile)object;

		long primaryKey = companyProfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CompanyProfile> toCacheModel() {
		CompanyProfileCacheModel companyProfileCacheModel =
			new CompanyProfileCacheModel();

		companyProfileCacheModel.uuid = getUuid();

		String uuid = companyProfileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			companyProfileCacheModel.uuid = null;
		}

		companyProfileCacheModel.companyProfileId = getCompanyProfileId();

		companyProfileCacheModel.regionId = getRegionId();

		companyProfileCacheModel.groupId = getGroupId();

		companyProfileCacheModel.companyId = getCompanyId();

		companyProfileCacheModel.userId = getUserId();

		companyProfileCacheModel.userName = getUserName();

		String userName = companyProfileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			companyProfileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			companyProfileCacheModel.createDate = createDate.getTime();
		}
		else {
			companyProfileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			companyProfileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			companyProfileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		companyProfileCacheModel.active = isActive();

		companyProfileCacheModel.title = getTitle();

		String title = companyProfileCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			companyProfileCacheModel.title = null;
		}

		companyProfileCacheModel.description = getDescription();

		String description = companyProfileCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			companyProfileCacheModel.description = null;
		}

		companyProfileCacheModel.email = getEmail();

		String email = companyProfileCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			companyProfileCacheModel.email = null;
		}

		companyProfileCacheModel.sector = getSector();

		String sector = companyProfileCacheModel.sector;

		if ((sector != null) && (sector.length() == 0)) {
			companyProfileCacheModel.sector = null;
		}

		companyProfileCacheModel.website = getWebsite();

		String website = companyProfileCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			companyProfileCacheModel.website = null;
		}

		return companyProfileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CompanyProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CompanyProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanyProfile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CompanyProfile)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CompanyProfile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CompanyProfile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompanyProfile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CompanyProfile)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CompanyProfile>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CompanyProfile.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _companyProfileId;
	private long _regionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _email;
	private String _sector;
	private String _sectorCurrentLanguageId;
	private String _website;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CompanyProfile, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CompanyProfile)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("companyProfileId", _companyProfileId);
		_columnOriginalValues.put("regionId", _regionId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("sector", _sector);
		_columnOriginalValues.put("website", _website);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("companyProfileId", 2L);

		columnBitmasks.put("regionId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("active_", 512L);

		columnBitmasks.put("title", 1024L);

		columnBitmasks.put("description", 2048L);

		columnBitmasks.put("email", 4096L);

		columnBitmasks.put("sector", 8192L);

		columnBitmasks.put("website", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CompanyProfile _escapedModel;

}